// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: c-minus-lexer.jflex



@SuppressWarnings("fallthrough")
class c_minus {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\2\1\2\2\1\1\22\0\1\1\1\3\6\0"+
    "\1\4\1\5\1\6\1\7\1\10\1\11\1\0\1\12"+
    "\12\13\1\0\1\14\1\15\1\16\1\17\2\0\32\20"+
    "\1\21\1\0\1\22\3\0\3\20\1\23\1\24\1\25"+
    "\1\20\1\26\1\27\2\20\1\30\1\20\1\31\1\32"+
    "\2\20\1\33\1\34\1\35\1\36\1\37\1\40\3\20"+
    "\1\41\1\0\1\42\7\0\1\2\u01a2\0\2\2\326\0"+
    "\u0100\2";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\5\20\1\23\1\24\1\25"+
    "\1\0\1\26\1\27\1\30\1\20\1\31\4\20\1\0"+
    "\1\20\1\32\3\20\1\33\1\34\1\20\1\35\2\20"+
    "\1\36\1\37";

  private static int [] zzUnpackAction() {
    int [] result = new int[52];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\43\0\106\0\43\0\151\0\43\0\43\0\43"+
    "\0\43\0\43\0\43\0\214\0\257\0\43\0\322\0\365"+
    "\0\u0118\0\u013b\0\43\0\43\0\u015e\0\u0181\0\u01a4\0\u01c7"+
    "\0\u01ea\0\43\0\43\0\43\0\u020d\0\43\0\43\0\43"+
    "\0\u0230\0\u013b\0\u0253\0\u0276\0\u0299\0\u02bc\0\u02df\0\u0302"+
    "\0\u013b\0\u0325\0\u0348\0\u036b\0\43\0\u013b\0\u038e\0\u013b"+
    "\0\u03b1\0\u03d4\0\u013b\0\u013b";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[52];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\22\1\25\2\22\1\26\3\22"+
    "\1\27\3\22\1\30\1\31\1\32\1\33\44\0\1\3"+
    "\57\0\1\34\32\0\1\35\47\0\1\15\45\0\1\36"+
    "\42\0\1\37\42\0\1\40\44\0\1\22\2\0\16\22"+
    "\22\0\1\22\2\0\5\22\1\41\10\22\22\0\1\22"+
    "\2\0\2\22\1\42\3\22\1\43\7\22\22\0\1\22"+
    "\2\0\1\22\1\44\14\22\22\0\1\22\2\0\7\22"+
    "\1\45\6\22\22\0\1\22\2\0\3\22\1\46\12\22"+
    "\2\0\6\35\1\47\34\35\20\0\1\22\2\0\11\22"+
    "\1\50\4\22\22\0\1\22\2\0\12\22\1\51\3\22"+
    "\22\0\1\22\2\0\12\22\1\52\3\22\22\0\1\22"+
    "\2\0\4\22\1\53\11\22\22\0\1\22\2\0\4\22"+
    "\1\54\11\22\2\0\6\35\1\47\3\35\1\55\30\35"+
    "\20\0\1\22\2\0\1\22\1\56\14\22\22\0\1\22"+
    "\2\0\13\22\1\57\2\22\22\0\1\22\2\0\1\60"+
    "\15\22\22\0\1\22\2\0\5\22\1\61\10\22\22\0"+
    "\1\22\2\0\10\22\1\62\5\22\22\0\1\22\2\0"+
    "\1\22\1\63\14\22\22\0\1\22\2\0\6\22\1\64"+
    "\7\22\2\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[1015];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\1\1\6\11\2\1\1\11"+
    "\4\1\2\11\5\1\3\11\1\0\3\11\6\1\1\0"+
    "\5\1\1\11\7\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[52];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
     